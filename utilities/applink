#!/usr/bin/python

import sys
sys.path.append("../") # TODO: Remove this once debugging is finished and applib is an
                       #       actual Python module.

import applib
from applib.logging import default_logger as log
from optparse import OptionParser

log.setName("applink")

# Parse options.
parser = OptionParser(usage="%prog [options] NAME VERSION")
applib.general.CommandLine.applyOptions(parser)
parser.add_option("-x", "--unlink", help="Unlink the application instead of linking it.", dest="app_unlink", action="store_true", default=False)
(options, args) = parser.parse_args()

appname = None
appver = None

if (len(args) == 1):
	appname = args[0]
elif (len(args) == 2):
	appname = args[0]
	appver = args[1]
else:
	log.showErrorW("Invalid number arguments.  Type applink --help for usage information.")
	sys.exit(1)

# Get the application type from the command line arguments.
apptype = applib.general.CommandLine.getTypeFromOptions(options)

# Create an instance of InstalledApplication.
app = applib.fs.InstalledApplication(apptype, appname, appver)
try:
	app.autodetect()
except applib.general.NoVersionsException:
	log.showErrorW("Unable to detect the application version.  Specify it as a second parameter.")
	sys.exit(1)
except applib.general.MultipleVersionsException:
	log.showErrorW("More than one version of application detected.  Specify the version you")
	log.showErrorO("want to link as a second parameter.")
	sys.exit(1)

# Check to make sure the application exists.
if (not app.exists()):
	log.showErrorW("Unable to locate the application on disk.  The location applink looked in was:")
	log.showErrorO("  * " + app.location())
	sys.exit(1)

if (not options.app_unlink):
	log.showInfoW("Linking application " + app.name + ", version " + app.version + " to the root filesystem...");
	successes, failures, tot = app.link()
	tot = str(tot)
	
	if (len(failures) == 0):
		log.showSuccessW("Successfully linked all " + str(len(successes)) + " files (total on disk: " + tot + ").")
		log.showSuccessO("Remember to run ldconfig if the application contains library files.")
		sys.exit(0)
	elif (len(successes) > 0):
		log.showWarningW("Only " + str(len(successes)) + " of " + str(len(successes) + len(failures)) + " files were successfully linked (total on disk: " + tot + ").")
		log.showWarningO("Remember to run ldconfig if the application contains library files.")
		sys.exit(1)
	else:
		log.showErrorW("All " + str(len(failures)) + " files failed to link.  Make sure you have appropriate permissions. (total on disk: " + tot + ")")
		sys.exit(1)
else:
	log.showInfoW("Unlinking application " + app.name + ", version " + app.version + " from the root filesystem...");
	successes, failures, tot = app.unlink()
	tot = str(tot)

	if (len(failures) == 0):
		log.showSuccessW("Successfully unlinked all " + str(len(successes)) + " files (total in app: " + tot + ").")
		log.showSuccessO("Remember to run ldconfig if the application contains library files.")
		sys.exit(0)
	elif (len(successes) > 0):
		log.showWarningW("Only " + str(len(successes)) + " of " + str(len(successes) + len(failures)) + " files were successfully unlinked (total in app: " + tot + ").")
		log.showWarningO("Remember to run ldconfig if the application contains library files.")
		sys.exit(1)
	else:
		log.showErrorW("All " + str(len(failures)) + " files failed to unlink.  Make sure you have appropriate permissions. (total in app: " + tot + ")")
		sys.exit(1)
